[ { kind: 'VariableDeclaration',
    type: { kind: 'Type', name: 'int', modifiers: [] },
    name: 'pi',
    initial: { kind: 'Integer', value: 314 } },
  { kind: 'VariableDeclaration',
    type: { kind: 'Type', name: 'int', modifiers: [] },
    name: 'esc',
    initial: { kind: 'Integer', value: 27 } },
  { kind: 'VariableDeclaration',
    type: 
     { kind: 'Type',
       name: 'char',
       modifiers: [ { kind: 'PointerTypeModifier' } ] },
    name: 'hello',
    initial: { kind: 'String', value: 'Hello World' } },
  { kind: 'VariableDeclaration',
    type: 
     { kind: 'Type',
       name: 'int',
       modifiers: [ { kind: 'ArrayTypeModifier', capacity: 32 } ] },
    name: 'T',
    initial: null },
  { kind: 'AssignmentStatement',
    leftHandSide: 'n',
    rightHandSide: 
     { kind: 'BinaryOperator',
       leftOperand: 'n',
       operator: '+',
       rightOperand: { kind: 'Integer', value: 1 } } },
  { kind: 'AssignmentStatement',
    leftHandSide: 'pi',
    rightHandSide: 'n' },
  { kind: 'AssignmentStatement',
    leftHandSide: 'esc',
    rightHandSide: { kind: 'Integer', value: 1 } },
  { kind: 'FunctionDefinition',
    convention: 'fastcall',
    type: { kind: 'Type', name: 'int', modifiers: [] },
    name: 'write',
    args: 
     [ { kind: 'FormalArgument',
         type: 
          { kind: 'Type',
            name: 'char',
            modifiers: [ { kind: 'PointerTypeModifier' } ] },
         name: 'buf' } ],
    statement: [] },
  { kind: 'FunctionDefinition',
    convention: 'stdcall',
    type: { kind: 'Type', name: 'int', modifiers: [] },
    name: 'f',
    args: 
     [ { kind: 'FormalArgument',
         type: 
          { kind: 'Type',
            name: 'char',
            modifiers: [ { kind: 'PointerTypeModifier' } ] },
         name: 's' },
       { kind: 'FormalArgument',
         type: { kind: 'Type', name: 'int', modifiers: [] },
         name: 'flags' } ],
    statement: 
     [ { kind: 'ConditionalLoopStatement',
         predicate: 
          { kind: 'BinaryOperator',
            leftOperand: 's',
            operator: '-',
            rightOperand: { kind: 'Integer', value: 1 } },
         statement: 
          [ { kind: 'ExpressionStatement',
              expression: { kind: 'FunctionCall', name: 'printn', args: [ 's' ] } } ] },
       { kind: 'ConditionalStatement',
         predicate: 's',
         statement: 
          [ { kind: 'ExpressionStatement',
              expression: { kind: 'FunctionCall', name: 'print', args: [ 's' ] } } ],
         elseStatement: 
          [ { kind: 'ExpressionStatement',
              expression: 
               { kind: 'FunctionCall',
                 name: 'print_const',
                 args: [ { kind: 'String', value: 'fatal' } ] } } ] },
       { kind: 'ReturnStatement',
         expression: { kind: 'Integer', value: 0 } } ] },
  { kind: 'ExpressionStatement',
    expression: 
     { kind: 'FunctionCall',
       name: 'f',
       args: [ 'a', { kind: 'Integer', value: 1 } ] } },
  { kind: 'ExpressionStatement',
    expression: 
     { kind: 'FunctionCall',
       name: 'write',
       args: [ { kind: 'Integer', value: 3 } ] } } ]
